BINARY DISTRIBUTION
-------------------
Simply copy the files from the subdirectories to the relevant subdirectories of your MtoA installation (or somewhere in
the appropriate paths):

For MtoA
--------
For Maya and MtoA, you need the ae and bin folders only. You can either install into the local MtoA installation folder or from a different folder or NFS 
If you decided to use the local MtoA installation:
 - Copy the content of the bin folder (libraries and metadata) into MtoA 'shaders' folder
 - Copy the content of the ae folder (Maya UI templates) into MtoA 'scripts/mtoa/ui/ae' folder
If you install to another folder (let's assume c:\solidangle\alShaders), you will need to setup the ARNOLD_PLUGIN_PATH and MTOA_TEMPLATES_PATH environment variables. 
In this case they will point to
ARNOLD_PLUGIN_PATH=C:\solidangle\alShaders\bin
MTOA_TEMPLATES_PATH=C:\solidangle\alShaders\ae


For SitoA
---------
Copy the content of the bin folder to  ...\Addons\SItoA\Application\Plugins\bin\nt-x86-64 in windows or ...\Addons\SItoA\Application\Plugins\bin\linux in linux
That should be enough to at least get the shaders on the Arnold > DLL Shaders menu.
Copy the SPDLs to
   ...\Addons\SItoA\Application\spdl
In Softimage, before you try to use the shaders, generate presets (in the Plug-in Tree, right-click the spdl and click Regenerate Presets)
In the render tree, you may need to refresh the preset manager to see the shaders.

If you've already created some instances of the shader and they didn't have the PPGLayout, delete the spdl xsiindex in your $XSI_USERHOME\Application folder and start Softimage again.


SOURCE DISTRIBUTION
-------------------
This project uses CMake >= 2.8 to build. It has been tested on Mac OS X >=10.7 and Windows 7 with MSVC++2010. It *should* work 
without modification on Linux but I haven't tested this thoroughly yet. 

In order to set it up to build in your environment, create a local.cmake file and set ARNOLD_ROOT to point to 
the root of your Arnold installation (in order to find the include files and libai.so), then set MTOA_ROOT to point to
the root of your MtoA installation if you want to install the shaders and AEtemplates there. If you want to install the
shaders and AEtemplates somewhere else, set MTOA_SHADERS and MTOA_SCRIPTS appropriately. 
You'll also need to set BOOST_INCLUDE to point to where your have your Boost headers installed in order to build alPhotometric.
If you don't have Boost you can skip alPhotometric by removing it from the list of subdirectories in the main CMakeLists.txt file.
The project contains an example local.cmake file (called local.cmake.win to stop it affecting the build) that has my build setup
for Windows in it.

Once those variables are set, cd to the top-level alShaders directory (assuming that's where you cloned it to), then:
> mkdir build
> cd build
> cmake ..
> make
> make install

On Windows use CMakeGUI. Set the source directory to where you unpacked the source files, and set the build directory to be the same
but with "\build" on the end. Click "Configure" and select "Yes" when it asks if you want to create the build directory. Then click
"Generate". This will create a Visual Studio project file in the build directory which you can use to build the library


TEST SUITE
----------
In order to run the test suite you must first have built and installed the shader library. 
Then download the test suite files from here: https://bitbucket.org/anderslanglands/alshaders/downloads/test.tar.gz
Next unpack it to the your top-level alShaders directory and run "python test.py"
The whole thing takes about 40 minutes to run on my ageing MacBook Pro. If you want it to go faster you can edit test_header.ass and reduce the AA_samples to 1.