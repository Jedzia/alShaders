import uigen

ui.shader({
   'name':'alHair',
   'intro':'Dual-scattering, multiple-importance-sampled hair shader.',
   'description':'Create believable hair shading with a plausible direct lighting model and approximate multiple scattering. The scattering from a hair fibre is a complex interaction of multiple lobes, often referred to in the literature as R, TT and TRT. Those related to the Specular 1, Transmission and Specular 2 lobes, respectively. The Diffuse lobe represents multiple scattering between hair fibres.',
   'output':'rgb',
   'maya_name':'alHair',
   'maya_classification':'shader/surface',
   'maya_id':'0x00116403',
   'maya_swatch':True,
   'maya_matte':False,
   'maya_bump':False,
   'c4d_classification':'surface',
   'c4d_menu':'surface', 
   'c4d_command_id':'1034646',   
   'soft_name':'ALS_Hair',
   'soft_classification':'material',
   'soft_version':1,
   'help_url':'http://www.anderslanglands.com/alshaders/alHair.html',
   'houdini_icon': 'SHELF_hair'
})

with uigen.group(ui, 'Fibre properties', False, description='The base properties of the hair fibres used to drive all lobes and the dual scattering. The color of the hair is defined by the Melanin and Dye color parameters and generates the correct color for all lobes based on the attenutaion of light inside the hair fibre. The Highlight Width and Shift parameters are also remapped to control each lobe in a plausible fashion. For the most part, you should be able to drive the hair shading with these parameters alone.'):
   ui.parameter('melanin', 'float', 0.15, 'Melanin', mn=0, mx=1, description='The melanin content of the hair fibre. Use this to generated natural colors for mammalian hair. 0 will give white hair, 0.2-04 blonde, 0.4-0.6 red, 0.6-0.8 brown and 0.8-1.0 black hair. If you want to set the color of the hair with a texture map, set this to 0 and use the Dye color parameter.', fig='alHair_melanin', figc='Melanin at [0.15,0.4,0.8]', mayane=True)

   ui.parameter('dyeColor', 'rgb', (1.0, 1.0, 1.0), 'Dye color', description='Color tint to apply to the hair. You can also plug a MayaRamp in here to define the color along the lenght of the hair.', fig='alHair_dyeColor', figc='Dye color set to [red,geen,blue]', mayane=True)
   
   ui.parameter('specularWidth', 'float', 3.0, 'Highlight width', connectible=False, description='The width of the hair highlights, essentially how shiny the hair appears. Values in the range 1-7 are sensible for human hair.', fig='alHair_width', figc='Highlight width at [1,3,7]')

   ui.parameter('specularShift', 'float', 4.0, 'Highlight shift', connectible=False, description='How much the highlights are shifted along the hair by the cuticles on the hair fibre. Generally this wants to be 1 to 1.5 times the value of the Width parameter.')
   ui.parameter('opacity', 'rgb', (1.0, 1.0, 1.0), 'Opacity', description='Opacity of the hair fibre. Setting this to anything other than white can make the shader very slow. If you want to get a softer look and resolve fine hair better, it is often a better idea to raise your AA samples instead.')

   with uigen.group(ui, 'Randomize', description='Add randomization to each hair fibre to create a more natural feel. In order for these controls to work correctly, an int or float user data named curve_id must be applied to the hair geometry with a unique value per hair.'):
      ui.parameter('randomTangent', 'float', 0.0, 'Tangent', description='Adds a random offset to the hair tangent which can be useful for breaking up uniform-looking grooms. Note that this value is dependent on your scene scale.', fig='alHair_randomTangent', figc='Tangent at [0,100,200]')
      ui.parameter('randomMelanin', 'float', 0.15, 'Melanin', description='Adds a random offset to the melanin content of the hair. Values from 0.05 to 0.2 give a very natural color variation.', fig='alHair_randomMelanin', figc='Melanin at [0.0,0.1,0.2]')
      ui.parameter('randomHue', 'float', 0.0, 'Dye hue', description='Add a random offest to the hue of the Dye color.', fig='alHair_randomHue', figc='Hue at [0,1,2')
      ui.parameter('randomSaturation', 'float', 0.0, 'Dye saturation', description='Add a random offest to the saturation of the Dye color.', fig='alHair_randomSaturation', figc='Saturation at [0.0,0.5,1.0]')


   with uigen.group(ui, 'Advanced', description='These parameters controls the rolloff of the highlights, which is a measure of how quickly the highlights appear as the light moves around the longitudinal axis of the hair.'):
      ui.parameter('glintRolloff', 'float', 5.0, 'Glint rolloff', connectible=False, description='Controls the rolloff of the caustic glints in the hair. Lower values make the glints more pingy, higher values make them softer and less apparent.')
      ui.parameter('transmissionRolloff', 'float', 10.0, 'Transmission rolloff', connectible=False, description='Controls the rolloff of the transmission highlight. Essentially, if you want the transmission highlight to only appear when the light is directly behind the hair, set this value to 10 or lower. If you want to increase the amount the highlight spreads as the light comes around from behind, set this value higher than 10.')

with uigen.group(ui, 'Diffuse', False, description='The diffuse lobe represents light that has scattered multiple times between hair fibres and so become soft and diffuse. This is especially important for lighter hair colors, whereas dark brown and black hair have little to no diffuse component.'):
   ui.parameter('diffuseStrength', 'float', 1.0, 'Strength', mn=0, mx=1, description='Multiplier on the strength of the diffuse illumination.', fig='alHair_diffuseStrength', figc='Strength at [1.0,0.5,0.0]', mayane=True)
   ui.parameter('diffuseColor', 'rgb', (1.0, 1.0, 1.0), 'Tint', description='Tint on the diffuse illumination. This is multiplied on top of the Fibre color specified above.', fig='alHair_diffuseColor', figc='Tint at [red,green,blue]', mayane=True)
   ui.parameter('diffuseScatteringMode', 'enum', 'dual-scattering', 'Scattering mode', enum_names=['kajiya-kay', 'dual-scattering'], description='The algorithm to use for diffuse calculation. dual-scattering is a realistic approximation of multiple scattering in hair and is more appropriate for long, realistic hair. kajiya-kay is the class algorithm used in the standard hair shader and is more suitable for short, cartoony fur. It is also a little cheaper to compute than dual-scattering.', fig='alHair_diffuseMode', figc='Mode set to [dual-scattering,kajiya-kay,no diffuse]')
   ui.parameter('diffuseForward', 'float',0.7, 'Forward scattering', mn=0, mx=1, description='Controls the amount of light bleeding through the hair in dual-scattering mode.', fig='alHair_forwardScattering', figc='Forward scattering at [1.0,0.5,0.0]')
   ui.parameter('diffuseBack', 'float', 0.7, 'Back scattering', mn=0, mx=1, description='Controls the amount of light kicked back from the hair in dual-scattering mode.', fig='alHair_backScattering', figc='Back scattering at [1.0,0.5,0.0]')
      

with uigen.group(ui, 'Specular 1', False, description='The direct-reflected, primary white highlight on the hair.'):
   ui.parameter('specular1Strength', 'float', 1.0, 'Strength', mn=0, mx=1, description='Multiplier on the strength of this lobe', fig='alHair_specular1Strength', figc='Strength at [1.0,0.5,0.0]', mayane=True)
   ui.parameter('specular1Color', 'rgb', (1.0, 1.0, 1.0), 'Tint', description='Color tint on the color automatically generated for this lobe by the Fibre color settings.', fig='alHair_specular1Color', figc='Tint at [red,green,blue]', mayane=True)
   ui.parameter('specular1WidthScale', 'float', 1.0, 'Width scale', description='Multiplier on the width of this lobe\'s highlight.', fig='alHair_specular1Width', figc='Width scale at [0.5,1.0,2.0]', mayane=True)
   ui.parameter('specular1Shift', 'float', 0.0, 'Shift offset', description='Offset on the shift of this lobe\'s highlight.', fig='alHair_specular1Shift', figc='Shift offset at [-3,0,3]', mayane=True)
   
with uigen.group(ui, 'Specular 2', False, description='The secondary colored highlight on the hair. This lobe is broader than the primary highlight and is strongly colored by the Fibre color. It also contains caustic glints caused by the hair focusing light.'):
   ui.parameter('specular2Strength', 'float', 1.0, 'Strength', mn=0, mx=1, description='Multiplier on the strength of this lobe', fig='alHair_specular2Strength', figc='Strength at [1.0,0.5,0.0]', mayane=True)
   ui.parameter('specular2Color', 'rgb', (1.0, 1.0, 1.0), 'Tint', description='Color tint on the color automatically generated for this lobe by the Fibre color settings.', fig='alHair_specular2Color', figc='Tint set to [red,green,blue]', mayane=True)
   ui.parameter('specular2WidthScale', 'float', 1.0, 'Width scale', description='Multiplier on the width of this lobe\'s highlight.', fig='alHair_specular2Width', figc='Width scale at [0.5,1.0,2.0]', mayane=True)
   ui.parameter('specular2Shift', 'float', 0.0, 'Shift offset', description='Offset on the shift of this lobe\'s highlight.', fig='alHair_specular2Shift', figc='Shift offset at [-3,0,3]', mayane=True)
   ui.parameter('glintStrength', 'float', 2.0, 'Glint strength', description='Strength of the caustic glints. Sensible values are in the range 1-5.', fig='alHair_glintStrength', figc='Glint strength at [0.0,2.5,5.0]')      

with uigen.group(ui, 'Transmission', False, description='The transmitted colored highlight on the hair. This lobe is tighter than the primary highlight and is weakly colored by the Fibre color.'):
   ui.parameter('transmissionStrength', 'float', 1.0, 'Strength', mn=0, mx=1, description='Multiplier on the strength of this lobe', mayane=True)
   ui.parameter('transmissionColor', 'rgb', (1.0, 1.0, 1.0), 'Tint', description='Color tint on the color automatically generated for this lobe by the Fibre color settings.', mayane=True)
   ui.parameter('transmissionWidthScale', 'float', 1.0, 'Width scale', description='Multiplier on the width of this lobe\'s highlight.', mayane=True)
   ui.parameter('transmissionShift', 'float', 0.0, 'Shift offset', description='Offset on the shift of this lobe\'s highlight.', mayane=True)

with uigen.group(ui, 'IDs', description='Whatever you plug in or set in the ID parameters in this section is written straight out to the corresponding id_X AOV. This is exteremely useful for creating mattes, or for outputting textures or other sub-network results to be used in comp.'):
   for i in range(1,9):
      ui.parameter('id%d'%i, 'rgb', (0.0, 0.0, 0.0), description='Color to be output in id_%d AOV.' % i, mayane=True)

with uigen.group(ui, 'AOVs', description='Use these parameters to change the name of the AOVs that the shader writes'):
   ui.parameter('crypto_asset_override', 'string', '', 'Crypto asset override', description='Overide the cryptomatte asset string for this shader')
   ui.parameter('crypto_object_override', 'string', '', 'Crypto object override', description='Overide the cryptomatte object string for this shader')
   ui.parameter('crypto_material_override', 'string', '', 'Crypto material override', description='Overide the cryptomatte material string for this shader')
   ui.aov('aov_diffuse_color', 'rgb', 'Diffuse color', description='Set the name of the AOV that contains the final color of the hair.')
   ui.aov('aov_direct_diffuse', 'rgb', 'Direct diffuse', description='Set the name of the AOV that contains the final direct diffuse illumination.')
   ui.aov('aov_indirect_diffuse', 'rgb', 'Indirect diffuse', description='Set the name of the AOV that contains the final indirect diffuse illumination.')
   ui.aov('aov_direct_local', 'rgb', 'Direct local', description='Set the name of the AOV that contains the local, back-scattered, direct diffuse illumination.')
   ui.aov('aov_indirect_local', 'rgb', 'Indirect local', description='Set the name of the AOV that contains the local, back-scattered, indirect diffuse illumination.')
   ui.aov('aov_direct_global', 'rgb', 'Direct global', description='Set the name of the AOV that contains the global, forward-scattered, direct diffuse illumination.')
   ui.aov('aov_indirect_global', 'rgb', 'Indirect global', description='Set the name of the AOV that contains the global, forward-scattered, indirect diffuse illumination.')
   ui.aov('aov_direct_specular', 'rgb', 'Direct specular', description='Set the name of the AOV that contains the direct illumination reflected by the primary specular lobe.')
   ui.aov('aov_indirect_specular', 'rgb', 'Indirect specular', description='Set the name of the AOV that contains the indirect illumination reflected by the primary specular lobe.')
   ui.aov('aov_light_group_1', 'rgb', 'Light group [1]', description='Set the name of the AOV that contains the lighting contribution from light group 1.')
   ui.aov('aov_light_group_2', 'rgb', 'Light group [2]', description='Set the name of the AOV that contains the lighting contribution from light group 2.')
   ui.aov('aov_light_group_3', 'rgb', 'Light group [3]', description='Set the name of the AOV that contains the lighting contribution from light group 3.')
   ui.aov('aov_light_group_4', 'rgb', 'Light group [4]', description='Set the name of the AOV that contains the lighting contribution from light group 4.')
   ui.aov('aov_light_group_5', 'rgb', 'Light group [5]', description='Set the name of the AOV that contains the lighting contribution from light group 5.')
   ui.aov('aov_light_group_6', 'rgb', 'Light group [6]', description='Set the name of the AOV that contains the lighting contribution from light group 6.')
   ui.aov('aov_light_group_7', 'rgb', 'Light group [7]', description='Set the name of the AOV that contains the lighting contribution from light group 7.')
   ui.aov('aov_light_group_8', 'rgb', 'Light group [8]', description='Set the name of the AOV that contains the lighting contribution from light group 8.')
   ui.aov('aov_id_1', 'rgb', 'ID [1]', description='Set the name of the AOV that contains ID 1.')
   ui.aov('aov_id_2', 'rgb', 'ID [2]', description='Set the name of the AOV that contains ID 2.')
   ui.aov('aov_id_3', 'rgb', 'ID [3]', description='Set the name of the AOV that contains ID 3.')
   ui.aov('aov_id_4', 'rgb', 'ID [4]', description='Set the name of the AOV that contains ID 4.')
   ui.aov('aov_id_5', 'rgb', 'ID [5]', description='Set the name of the AOV that contains ID 5.')
   ui.aov('aov_id_6', 'rgb', 'ID [6]', description='Set the name of the AOV that contains ID 6.')
   ui.aov('aov_id_7', 'rgb', 'ID [7]', description='Set the name of the AOV that contains ID 7.')
   ui.aov('aov_id_8', 'rgb', 'ID [8]', description='Set the name of the AOV that contains ID 8.')
   ui.aov('aov_crypto_asset', 'rgb', 'Crypto Asset', description='Set the name of the cryptomatte asset AOV')
   ui.aov('aov_crypto_object', 'rgb', 'Crypto Object', description='Set the name of the cryptomatte object AOV')
   ui.aov('aov_crypto_material', 'rgb', 'Crypto Material', description='Set the name of the cryptomatte material AOV')

with uigen.group(ui, 'Advanced'):
   ui.parameter('dualDepth', 'int', 0, 'Brute force bounces', description='Number of brute-force, inter-hair bounces to calculate before falling back to dual scattering. THIS PARAMETER IS DEPRECATED AND WILL BE REMOVED IN A FUTURE RELEASE.')
   ui.parameter('diffuseIndirectStrength', 'float', 0.0, 'Diffuse indirect strength', description='Multiplier on the intensity of the indirect diffuse illumination. The default value of 0 disables indirect illumination on the hair since in most cases you don\'t need it and it can be quite expensive.')
   ui.parameter('extraSamplesDiffuse', 'int', 0, 'Diffuse extra samples', description='Number of extra samples to take when calculating indirect diffuse illumination.')
   ui.parameter('glossyIndirectStrength', 'float', 0.0, 'Glossy indirect strength', description='Multiplier on the intensity of the indirect glossy illumination. The default value of 0 disables indirect illumination on the hair since in most cases you don\'t need it and it can be quite expensive.')
   ui.parameter('extraSamplesGlossy', 'int', 0, 'Glossy extra samples', description='Number of extra samples to take when calculating indirect glossy illumination.')
   ui.parameter('uparam', 'string', 'uparamcoord', 'U param', description='Name of the user data that contains the U coordinate of the surface for texturing.')
   ui.parameter('vparam', 'string', 'vparamcoord', 'V param', description='Name of the user data that contains the V coordinate of the surface for texturing.')

